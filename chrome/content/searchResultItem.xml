<?xml version="1.0" encoding="UTF-8"?>

<!--
/* ***** BEGIN LICENSE BLOCK *****
 * Version: GPL 3.0
 *
 * The contents of this file are subject to the General Public License
 * 3.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.gnu.org/licenses/gpl.html
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * ## Easy NZB Download.
 *
 * Author: Michel Verbraak (info@1st-setup.nl)
 * Website: https://github.com/1stsetup/easynzbdl
 *
 * ***** BEGIN LICENSE BLOCK *****/
-->

<bindings id="easynzbdl-searchResultItem-bindings"
  xmlns="http://www.mozilla.org/xbl"
  xmlns:html="http://www.w3.org/1999/xhtml"
  xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
  xmlns:xbl="http://www.mozilla.org/xbl">

  <binding id="easynzbdl-searchResultItem">
    <content>
	<xul:hbox minheight="28">
		<xul:vbox onclick="document.getBindingParent(this).changeExpanded();" class="expandbutton">
			<xul:label anonid="expand-searchResultItem" value="+" class="expandbutton" tooltiptext="Show result info"/>
		</xul:vbox>
		<xul:vbox>
			<xul:hbox anonid="searchResultItemLabelBox" align="center">
				<xul:image anonid="searchResultItemDownloadButton" src="chrome://easynzbdl/skin/send-to-sabnzbd.png" tooltiptext="Send NZB to SABnzbd" class="downloadbutton" onclick="document.getBindingParent(this).startDownLoad();"/>
				<xul:label anonid="searchResultItemDaysLabel" value="" xbl:inherits="value=days"/>
				<xul:label anonid="searchResultItemTitleLabel" value="empty" xbl:inherits="value=label"/>
				<xul:label anonid="searchResultItemSizeLabel" value="" xbl:inherits="value=size"/>
				<xul:label anonid="searchResultItemDaysLabel" value="" xbl:inherits="value=status"/>
			</xul:hbox>
			<xul:hbox anonid="searchResultInfoBox" collapsed="true" align="center">
				<xul:image anonid="searchResultItemInfoLabel-coverurl" maxheight="150"/>
				<xul:vbox>
					<xul:label anonid="searchResultItemInfoLabel-grabs" value=""/>
					<xul:label anonid="searchResultItemInfoLabel-files" value=""/>
					<xul:label anonid="searchResultItemInfoLabel-comments" value=""/>
					<xul:label anonid="searchResultItemInfoLabel-password" value=""/>
					<xul:label anonid="searchResultItemInfoLabel-imdbtitle" value=""/>
					<xul:label anonid="searchResultItemInfoLabel-imdbplot" value=""/>
					<xul:label anonid="searchResultItemInfoLabel-imdbscore" value=""/>
					<xul:label anonid="searchResultItemInfoLabel-genre" value=""/>
					<xul:label anonid="searchResultItemInfoLabel-imdbyear" value=""/>
					<xul:label anonid="searchResultItemInfoLabel-imdbdirector" value=""/>
					<xul:label anonid="searchResultItemInfoLabel-imdbactors" value=""/>
				</xul:vbox>
			</xul:hbox>
		</xul:vbox>
	</xul:hbox>
    </content>

    <implementation>
      <constructor><![CDATA[
		//dump("easynzbdl-searchResultItem constructor\n");
		this._item = null;
      ]]></constructor>
      <destructor><![CDATA[
		this._item = null;
      ]]></destructor>

	<method name="getTagValue">
        <parameter name="aTagName" />
        <parameter name="aName" />
		<body><![CDATA[
		let value = this._item.XPath('/'+aTagName+'[@name="'+aName+'"]');
		if (value.length > 0) {
			return value[0].getAttribute("value");
		}
		return "";
		]]></body>
	</method>

	<property name="item"> 
		<getter><![CDATA[
			return this._item;
		]]></getter>
		<setter><![CDATA[
			this._item = val;
			if (this._item) {
				//dump("item:"+this._item.getTagValue("_default_:title")+"\n");
				this.setAttribute("label", this._item.getTagValue("_default_:title"));

				// Get usenetdate
				let usenetdate = this.getTagValue("newznab:attr", "usenetdate");
				if (usenetdate.length > 0) {
					this._usenetdate = new Date(usenetdate);
					var diff = ((new Date()).getTime() - this._usenetdate.getTime()) / (1000*3600);
					if (diff >= 24) {
						// We make days.
						
						this.setAttribute("days", Math.round(diff/24) + " days");
					}
					else {
						// We make hours.
						this.setAttribute("days", Math.round(diff) + " hours");
					}
				}

				// Get size
				let size = this.getTagValue("newznab:attr", "size");
				if (size.length > 0) {
					let sizeType = "B";
					if (size > 1024) {
						size = size / 1024;
						sizeType = "KB";
					}
					if (size > 1024) {
						size = size / 1024;
						sizeType = "MB";
					}
					if (size > 1024) {
						size = size / 1024;
						sizeType = "GB";
					}

					size = Math.round(size * 10) / 10;
					this.setAttribute("size", size + " " + sizeType);
				}

				document.getAnonymousElementByAttribute(this, "anonid", "searchResultItemInfoLabel-coverurl")
					.setAttribute("src",this.getTagValue("newznab:attr", "coverurl")); 
				document.getAnonymousElementByAttribute(this, "anonid", "searchResultItemInfoLabel-grabs")
					.setAttribute("value", "Grabs: " + this.getTagValue("newznab:attr", "grabs")); 
				document.getAnonymousElementByAttribute(this, "anonid", "searchResultItemInfoLabel-files")
					.setAttribute("value", "Files: " + this.getTagValue("newznab:attr", "files")); 
				document.getAnonymousElementByAttribute(this, "anonid", "searchResultItemInfoLabel-comments")
					.setAttribute("value", "Comments: " + this.getTagValue("newznab:attr", "comments")); 
				document.getAnonymousElementByAttribute(this, "anonid", "searchResultItemInfoLabel-password")
					.setAttribute("value", "Password: " + (this.getTagValue("newznab:attr", "password") == "0" ? "No" : "Yes") ); 
				document.getAnonymousElementByAttribute(this, "anonid", "searchResultItemInfoLabel-imdbtitle")
					.setAttribute("value", "IMDb title: " + this.getTagValue("newznab:attr", "imdbtitle")); 
				document.getAnonymousElementByAttribute(this, "anonid", "searchResultItemInfoLabel-imdbplot")
					.setAttribute("value", "IMDb plot: " + this.getTagValue("newznab:attr", "imdbplot")); 
				document.getAnonymousElementByAttribute(this, "anonid", "searchResultItemInfoLabel-imdbscore")
					.setAttribute("value", "IMDb score: " + this.getTagValue("newznab:attr", "imdbscore")); 
				document.getAnonymousElementByAttribute(this, "anonid", "searchResultItemInfoLabel-imdbyear")
					.setAttribute("value", "IMDb year: " + this.getTagValue("newznab:attr", "imdbyear")); 
				document.getAnonymousElementByAttribute(this, "anonid", "searchResultItemInfoLabel-imdbdirector")
					.setAttribute("value", "IMDb director: " + this.getTagValue("newznab:attr", "imdbdirector")); 
				document.getAnonymousElementByAttribute(this, "anonid", "searchResultItemInfoLabel-imdbactors")
					.setAttribute("value", "IMDb actors: " + this.getTagValue("newznab:attr", "imdbactors")); 
				document.getAnonymousElementByAttribute(this, "anonid", "searchResultItemInfoLabel-genre")
					.setAttribute("value", "Genre: " + this.getTagValue("newznab:attr", "genre")); 
			}
		]]></setter>
	</property>

	<property name="parentObject"> 
		<getter><![CDATA[
			return this._parentObject;
		]]></getter>
		<setter><![CDATA[
			this._parentObject = val;
		]]></setter>
	</property>

	<property name="expanded"> 
		<getter><![CDATA[
			return this._expanded;
		]]></getter>
		<setter><![CDATA[
			this._expanded = val;
			let itemsBox = document.getAnonymousElementByAttribute(this, "anonid", "searchResultInfoBox");
			if (itemsBox) {
				itemsBox.collapsed = !this.expanded;
			}
			let expandLabel = document.getAnonymousElementByAttribute(this, "anonid", "expand-searchResultItem");
			if (expandLabel) {
				expandLabel.value = this.expanded ? "-" : "+";
				expandLabel.setAttribute("tooltiptext", (this.expanded ? "Hide result info" : "Show result info"));
			}

		]]></setter>
	</property>

	<method name="changeExpanded">
		<body><![CDATA[
		this.expanded = !this.expanded;
		]]></body>
	</method>

	<method name="show">
		<body><![CDATA[
		this.hidden = false;
		]]></body>
	</method>

	<method name="hide">
		<body><![CDATA[
		this.hidden = true;
		]]></body>
	</method>

	<method name="startDownLoad">
		<body><![CDATA[
		//dump("Start download\n");
		if (this._parentObject) {
			this._parentObject.startDownload(this);
		}
		]]></body>
	</method>

    </implementation>

  </binding>

</bindings>
